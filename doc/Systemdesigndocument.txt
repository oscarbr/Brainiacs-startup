System design document for (mall)
OM DOKUMENTET:
Beskriv om ni använder kända mönster (Architectural styles
) som tex Client-server, layered, multi-tier, MVC, MTV (DJango)…)
Dela upp i mindre komponenter (t ex Lagring, gui…)
Namnge och beskriv klasser i dessa komponenter
Ni behöver inte skriva (ännu) vilka metoder dessa klasser har
Inget krav på UML
SYFTE:
Nya medlemmar i ert projekt skall kunna sätta sig in i projektet snabbt
Ni skall få stöd av dokumentet under implentationsfasen (faserna)
 
System design document for NNN

Table of Contents

System design document for NNN
   1 Introduction
       1.1 Design goals
       1.2 Definitions, acronyms and abbreviations
       1.3 References
   2 Proposed system architecture
       2.1 Overview
       2.2 Software decomposition
           2.2.1 General
           2.2.2 Tiers
(A multilayered software architecture is using different layers for allocating the responsibilities of an application. )
           2.2.3 Communication
           2.2.4 Decomposition into subsystems
           2.2.5 Layering (anpassas efter indelning, tex MVC)
(The concepts of layer and tier are often used interchangeably. However, one fairly common point of view is that there is indeed a difference, and that a layer is a logical structuring mechanism for the elements that make up the software solution, while a tier is a physical structuring mechanism for the system infrastructure. "
           2.2.6 Dependency analysis
       2.3 Concurrency issues
       2.4 Persistent data management
       2.5 Access control and security
       2.6 Boundary conditions
       2.7 References
   APPENDIX 

 Version: 

 Date 

 Author 

This version overrides all previous versions.

1 Introduction

1.1 Design goals

1.2 Definitions, acronyms and abbreviations 

1.3 References

2 Proposed system architecture

In this section we propose a high level architechture.

2.1 Overview 

2.2 Software decomposition

2.2.1 General

2.2.2 Tiers

2.2.3 Communication

2.2.4 Decomposition into subsystems 

2.2.5 Layering

2.2.6 Dependency analysis

2.3 Concurrency issues

  Jag utgår ifrån att ni vet vad "concurrency" är, annars får ni läsa på om detta. Tex 

  http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29

Om er applikation på något sätt hanterar concurrency tar ni lämpligen upp detta i denna sektion

2.4 Persistent data management

Hur ni hanterar persistent datalagrning?

Har ni ens detta?

Detta tas upp i denna sektion
2.5 Access control and security

  Jag utgår ifrån att ni vet vad "Access control" är, annars får ni läsa på om detta. Tex 

        http://en.wikipedia.org/wiki/Access_control

  Om er applikation på något sätt hanterar "Access control" tar ni lämpligen upp detta i denna sektion

  Om er applikation på något sätt hanterar "säkerhet" tar ni lämpligen upp detta i denna sektion

2.6 Boundary conditions

Beskriv hur ert system startas, stängs ned samt hur fel hanteras.
2.7 References 

 APPENDIX